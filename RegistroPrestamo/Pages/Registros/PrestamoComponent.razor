@page "/Prestamos"
@page "/Prestamos/{prestamosId:int}"
@using RegistroPrestamo.Models
@using RegistroPrestamo.BLL

@inject IToastService toast


<EditForm Model="prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header">

            <h3>Registro de Prestamo</h3>

        </div>

        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="prestamo.prestamoId" class="form-control col-4" />
                                <ValidationMessage For="(() => prestamo.prestamoId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*Fecha*@
                <div class="form-group">
                    <label>FECHA:</label>
                    <InputDate @bind-Value="prestamo.fecha" class="form-control" />
                    <ValidationMessage For="@(() => prestamo.fecha)" />
                </div>
                @*Persona*@
                <div class="form-group">
                    <label for="persona_select">PERSONA:</label>
                    <InputSelect id="persona_select" @bind-Value="personaSeleccionada" @onchange="CambiarValor" @onclick="CambiarValor" class="form-control">
                        <option value="">Elija una Persona</option>
                        @foreach (var item in listaPersona)
                        {
                            <option value="@item.personaId">@item.nombre</option>
                        }
                    </InputSelect>
                </div>

                @*Concepto*@
                <div class="form-group">
                    <label>CONCEPTO:</label>
                    <InputText @bind-Value="prestamo.concepto" class="form-control" />
                    <ValidationMessage For="@(() => prestamo.concepto)" />
                </div>
                @*Monto*@
                <div class="form-group">
                    <label>MONTO:</label>
                    <InputNumber @bind-Value="prestamo.monto" @onclick="IgualarMontoBalance" class="form-control" />
                    <ValidationMessage For="@(() => prestamo.monto)" />
                </div>
                @*Balance*@
                <div class="form-group">
                    <label>BALANCE:</label>
                    <InputNumber @bind-Value="prestamo.balance" readonly="true" class="form-control" />
                    <ValidationMessage For="@(() => prestamo.balance)" />
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>



@code {

    Prestamo prestamo = new Prestamo();

    [Parameter]
    public int prestamosId { get; set; }

    private List<Personas> listaPersona = new List<Personas>();
    private string personaSeleccionada { get; set; }


    protected override void OnInitialized()
    {
        Nuevo();
        if (prestamosId > 0)
        {
            var auxPretamo = PrestamosBLL.Buscar(prestamosId);
            if (auxPretamo != null)
                this.prestamo = auxPretamo;
            else
                toast.ShowWarning("No encontrado.");
        }

        listaPersona = PersonasBLL.GetList(p => true);
    }

    private void Buscar()
    {
        var encontrado = PrestamosBLL.Buscar(prestamo.prestamoId);
        if (encontrado != null)
        {
            this.prestamo = encontrado;
            EstablecerNombre(prestamo);

        }
        else
            toast.ShowWarning("No encontrado");

    }

    private void EstablecerNombre(Prestamo prestamo)
    {
        var auxPersona = PersonasBLL.Buscar(prestamo.personaId);
        if (auxPersona != null)
        {
            personaSeleccionada = auxPersona.nombre;
        }
    }

    private void CambiarValor()
    {
        try
        {
            int auxPersonaId = Int32.Parse(personaSeleccionada);
            this.prestamo.personaId = auxPersonaId;
        }
        catch (Exception)
        {

        }
    }

    private void IgualarMontoBalance()
    {
        decimal auxMonto = prestamo.monto;
        prestamo.balance = auxMonto;
    }




    private void Nuevo()
    {
        this.prestamo = new Prestamo();
        personaSeleccionada = string.Empty;
    }


    private void Guardar()
    {
        bool paso;
        paso = PrestamosBLL.Guardar(prestamo);

        if (paso)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
        {
            toast.ShowError("No fue posible guardar");
        }

    }

    private void Eliminar()
    {
        bool elimino;

        elimino = PrestamosBLL.Eliminar(prestamo.prestamoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
}
